from pathlib import Path

#### Functions ####
def listed_bams(bam_path):
    """
    move through the list of supplied bam directories and create a final output list of path/sample.bam
    :param bam_path: from config file - config['samples']
    :return: a list of all sorted bams to create VCF file
    """
    with open('bams.list', 'w') as bam_out:
        for bamdir in bam_path:
            # list all .bam files in directories from config file, append to final list of samples
            path_bams = Path(bamdir).glob('*.bam')
            for i in path_bams:
                bamline = f'{str(i)}\n'
                bam_out.write(bamline)


def chromosome_list(chromfile):
    chromosomes = []
    with open(chromfile, 'r') as chr:
        for line in chr:
            content=line.split()
            chromosomes.append(content[0])

    return chromosomes


#### Inputs and Rules ####
home_dir = Path.home()
configfile: f'{home_dir}/gbs2/config/config_vcf.yaml'

# take the outdir input from the configfile.yaml and make that the working directory if not exists
out_path = config['outfile']
Path(out_path).mkdir(parents=True, exist_ok=True)

# get the info out of the config file into variables
p_dir = Path(out_path).parts[-1]  # the final folder in the outfile entry for snp file naming
reference = config['reference']
chr_file = f"{reference}.fai"
chr_list = chromosome_list(chr_file)

workdir: out_path

# generate the bams.list file for this run into the working directory
listed_bams(config['sample_directories'])

rule all:
    input:
        expand("{vcf_name}.vcf.gz", vcf_name=p_dir),
        expand("{vcf_name}.vcf.gz.csi", vcf_name=p_dir),
        expand("chromsomes/{vcf_name}.{chrom}.vcf", vcf_name=p_dir, chrom=chr_list)


rule bcf_variantcall:
    input:
        bammies = 'bams.list',
        ref = reference
    output:  temp("{vcf_name}.vcf")
    shell:
         "bcftools mpileup -a AD,DP -f {input.ref} -b {input.bammies} | bcftools call -mv -Ov > {output}"


rule compress:
    input: "{vcf_name}.vcf"
    output: "{vcf_name}.vcf.gz"
    # output: "calls/{vcf_name}.vcf.gz"
    shell: "bgzip -c {input} > {output}"


rule index_vcf:
    input: "{vcf_name}.vcf.gz"
    output: "{vcf_name}.vcf.gz.csi",
    shell: "tabix -C -p vcf {input}"


rule split_vcf:
    input:
        vcf = expand("{vcf_name}.vcf.gz", vcf_name=p_dir),
        csi = expand("{vcf_name}.vcf.gz.csi", vcf_name=p_dir)
    params:
        chrom = lambda wildcards: chr_list
    output:  expand("chromsomes/{vcf_name}.{chrom}.vcf", vcf_name=p_dir, chrom=chr_list)

          # "calls/{vcf_name}.{params.chrom}.vcf"
    # shell: "bcftools view -r {params.chrom} {input.vcf} > {output}"
    run:
        for chr in chr_list:
            save_name = f"chromsomes/{p_dir}.{chr}.vcf"
            shell("bcftools view -r {chr} {input.vcf} > {save_name}")
